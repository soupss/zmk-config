// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <300>;
    quick-tap-ms = <100>;
    require-prior-idle-ms = <0>;
    flavor = "balanced";
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE>; };

&sk { quick-release; };

/ {
    behaviors {
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        cma_scolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dash_undrsc: dash_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;

            mods = <(MOD_LSFT)>;
        };

        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "mod tap right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <4 14 24 31 30 23 13 3 2 12 22 21 11 10 0 1 20 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };

        mtl: mod_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "mod tap left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <17 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };

        mtr_shift: mtr_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MTR_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <0>;
            flavor = "balanced";
            hold-trigger-key-positions = <4 14 24 31 30 23 13 3 2 12 22 21 11 10 0 1 20 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };

        mtl_shift: mtl_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MTL_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <0>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <17 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <11 12>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        globe {
            bindings = <&kp GLOBE>;
            key-positions = <20 21>;
        };

        bootloader_l {
            bindings = <&bootloader>;
            key-positions = <10 11 12 13 14>;
        };

        bootloader_r {
            bindings = <&bootloader>;
            key-positions = <15 16 17 18 19>;
        };

        to-gaming-layer {
            bindings = <&tog 4>;
            key-positions = <11 2 13 12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp Q        &kp W               &kp E         &kp R        &kp T          &kp Y       &kp U         &kp I         &kp O               &kp P
&mtl LALT A  &mtl_shift LSHFT S  &mtl LCTRL D  &mtl LGUI F  &kp G          &kp H       &mtr RGUI J   &mtr RCTRL K  &mtr_shift RSHFT L  &mtr RALT SQT
&kp Z        &kp X               &kp C         &kp V        &kp B          &kp N       &kp M         &cma_scolon   &dot_colon          &dash_undrsc
                                               &kp TAB      &lt 2 SPACE    &lt 1 BSPC  &lt 3 RETURN
            >;
        };

        numbers {
            bindings = <
&trans  &kp F7         &kp F8         &kp F9        &kp F12    &trans  &kp N7        &kp N8         &kp N9         &trans
&trans  &mtl LSHFT F4  &mtl LCTRL F5  &mtl LGUI F6  &kp F11    &trans  &mtr RGUI N4  &mtr RCTRL N5  &mtr RSHFT N6  &mtr RALT N0
&trans  &kp F1         &kp F2         &kp F3        &kp F10    &trans  &kp N1        &kp N2         &kp N3         &trans
                                      &trans        &trans     &trans  &trans
            >;
        };

        symbols {
            bindings = <
&trans               &kp AT_SIGN       &kp HASH          &kp STAR          &kp TILDE        &kp GRAVE          &kp LBKT                    &kp RBKT         &kp PIPE       &trans
&mtl LALT AMPERSAND  &mtl LSHFT EQUAL  &mtl LCTRL CARET  &mtl LGUI DOLLAR  &kp PRCNT        &kp DOUBLE_QUOTES  &mtr RGUI LEFT_PARENTHESIS  &mtr RCTRL RPAR  &mtr RSHFT LT  &mtr RALT GT
&trans               &kp EXCL          &kp QMARK         &kp SLASH         &kp BACKSLASH    &trans             &kp LBRC                    &kp RBRC         &kp PLUS       &trans
                                                         &trans            &trans           &trans             &trans
            >;
        };

        utility {
            bindings = <
                &kp C_BRI_UP  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR     &trans       &trans    &trans     &trans           &kp C_VOL_UP
&trans        &trans        &trans        &trans        &trans         &kp LEFT     &kp DOWN  &kp UP     &kp RIGHT_ARROW  &kp K_MUTE
&kp C_BRI_DN  &trans        &trans        &trans        &bootloader    &bootloader  &trans    &kp SPACE  &trans           &kp C_VOL_DN
                                          &trans        &trans         &trans       &trans
            >;
        };

        gaming {
            bindings = <
&kp Q  &kp W  &kp E  &kp R       &kp T        &kp Y     &kp U    &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F       &kp G        &kp H     &kp J    &kp K      &kp L    &kp SQT
&kp Z  &kp X  &kp C  &kp V       &kp B        &kp N     &kp M    &kp COMMA  &kp DOT  &to 0
                     &kp ESCAPE  &kp SPACE    &kp BSPC  &kp RET
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};

